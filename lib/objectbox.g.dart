// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/user/data/models/users_model.dart';
import 'features/appointment/data/models/appointment.dart';
import 'features/client/data/models/client.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2),
      name: 'AppointmentSchema',
      lastPropertyId: const obx_int.IdUid(9, 7617349162006730990),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3717834262775929084),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8490447078486864820),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8145614914489207244),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1734301670390868762),
            name: 'fromDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5440451931260295761),
            name: 'toDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5375064600237580625),
            name: 'lastUpdate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 877759975389265884),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2435066323877104109),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7617349162006730990),
            name: 'clientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7900870585069514014),
            relationTarget: 'ClientSchema')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3),
      name: 'ClientSchema',
      lastPropertyId: const obx_int.IdUid(6, 6007920042929438378),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5555597257152232090),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3204969529432121208),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1931603103080843960),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6049600247455947164),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4414747151987861419),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6007920042929438378),
            name: 'lastUpdate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'linkAppointments',
            srcEntity: 'AppointmentSchema',
            srcField: 'client')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(9, 249219285888371299),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4359905876601394740),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1712312824777077428),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 303102462384224252),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3290830076114544379),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4675380094038512335),
            name: 'isCurrentUser',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2961562627451087569),
            name: 'lastUpdate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8865586706154070390),
            name: 'isSetupComplete',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1203890603581925110),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 249219285888371299),
            name: 'remoteId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 1),
      lastIndexId: const obx_int.IdUid(1, 7900870585069514014),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AppointmentSchema: obx_int.EntityDefinition<AppointmentSchema>(
        model: _entities[0],
        toOneRelations: (AppointmentSchema object) => [object.client],
        toManyRelations: (AppointmentSchema object) => {},
        getId: (AppointmentSchema object) => object.id,
        setId: (AppointmentSchema object, int id) {
          object.id = id;
        },
        objectToFB: (AppointmentSchema object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.fromDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.toDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdate.millisecondsSinceEpoch);
          fbb.addOffset(6, locationOffset);
          fbb.addOffset(7, imagePathOffset);
          fbb.addInt64(8, object.client.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final fromDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final toDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = AppointmentSchema(
              id: idParam,
              title: titleParam,
              description: descriptionParam,
              fromDate: fromDateParam,
              toDate: toDateParam,
              lastUpdate: lastUpdateParam,
              location: locationParam,
              imagePath: imagePathParam);
          object.client.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.client.attach(store);
          return object;
        }),
    ClientSchema: obx_int.EntityDefinition<ClientSchema>(
        model: _entities[1],
        toOneRelations: (ClientSchema object) => [],
        toManyRelations: (ClientSchema object) => {
              obx_int.RelInfo<AppointmentSchema>.toOneBacklink(9, object.id,
                      (AppointmentSchema srcObject) => srcObject.client):
                  object.linkAppointments
            },
        getId: (ClientSchema object) => object.id,
        setId: (ClientSchema object, int id) {
          object.id = id;
        },
        objectToFB: (ClientSchema object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, imagePathOffset);
          fbb.addInt64(5, object.lastUpdate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final lastUpdateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = ClientSchema(
              id: idParam,
              name: nameParam,
              email: emailParam,
              lastUpdate: lastUpdateParam,
              phone: phoneParam,
              imagePath: imagePathParam);
          obx_int.InternalToManyAccess.setRelInfo<ClientSchema>(
              object.linkAppointments,
              store,
              obx_int.RelInfo<AppointmentSchema>.toOneBacklink(9, object.id,
                  (AppointmentSchema srcObject) => srcObject.client));
          return object;
        }),
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[2],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final imagePathOffset = fbb.writeString(object.imagePath);
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final remoteIdOffset = fbb.writeString(object.remoteId);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imagePathOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addBool(4, object.isCurrentUser);
          fbb.addInt64(5, object.lastUpdate.millisecondsSinceEpoch);
          fbb.addBool(6, object.isSetupComplete);
          fbb.addOffset(7, imageUrlOffset);
          fbb.addOffset(8, remoteIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isCurrentUserParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final isSetupCompleteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final remoteIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final object = UserModel(
              id: idParam,
              name: nameParam,
              email: emailParam,
              imagePath: imagePathParam,
              isCurrentUser: isCurrentUserParam,
              isSetupComplete: isSetupCompleteParam,
              imageUrl: imageUrlParam,
              remoteId: remoteIdParam)
            ..lastUpdate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AppointmentSchema] entity fields to define ObjectBox queries.
class AppointmentSchema_ {
  /// See [AppointmentSchema.id].
  static final id =
      obx.QueryIntegerProperty<AppointmentSchema>(_entities[0].properties[0]);

  /// See [AppointmentSchema.title].
  static final title =
      obx.QueryStringProperty<AppointmentSchema>(_entities[0].properties[1]);

  /// See [AppointmentSchema.description].
  static final description =
      obx.QueryStringProperty<AppointmentSchema>(_entities[0].properties[2]);

  /// See [AppointmentSchema.fromDate].
  static final fromDate =
      obx.QueryDateProperty<AppointmentSchema>(_entities[0].properties[3]);

  /// See [AppointmentSchema.toDate].
  static final toDate =
      obx.QueryDateProperty<AppointmentSchema>(_entities[0].properties[4]);

  /// See [AppointmentSchema.lastUpdate].
  static final lastUpdate =
      obx.QueryDateProperty<AppointmentSchema>(_entities[0].properties[5]);

  /// See [AppointmentSchema.location].
  static final location =
      obx.QueryStringProperty<AppointmentSchema>(_entities[0].properties[6]);

  /// See [AppointmentSchema.imagePath].
  static final imagePath =
      obx.QueryStringProperty<AppointmentSchema>(_entities[0].properties[7]);

  /// See [AppointmentSchema.client].
  static final client = obx.QueryRelationToOne<AppointmentSchema, ClientSchema>(
      _entities[0].properties[8]);
}

/// [ClientSchema] entity fields to define ObjectBox queries.
class ClientSchema_ {
  /// See [ClientSchema.id].
  static final id =
      obx.QueryIntegerProperty<ClientSchema>(_entities[1].properties[0]);

  /// See [ClientSchema.name].
  static final name =
      obx.QueryStringProperty<ClientSchema>(_entities[1].properties[1]);

  /// See [ClientSchema.email].
  static final email =
      obx.QueryStringProperty<ClientSchema>(_entities[1].properties[2]);

  /// See [ClientSchema.phone].
  static final phone =
      obx.QueryStringProperty<ClientSchema>(_entities[1].properties[3]);

  /// See [ClientSchema.imagePath].
  static final imagePath =
      obx.QueryStringProperty<ClientSchema>(_entities[1].properties[4]);

  /// See [ClientSchema.lastUpdate].
  static final lastUpdate =
      obx.QueryDateProperty<ClientSchema>(_entities[1].properties[5]);

  /// see [ClientSchema.linkAppointments]
  static final linkAppointments =
      obx.QueryBacklinkToMany<AppointmentSchema, ClientSchema>(
          AppointmentSchema_.client);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.id].
  static final id =
      obx.QueryIntegerProperty<UserModel>(_entities[2].properties[0]);

  /// See [UserModel.imagePath].
  static final imagePath =
      obx.QueryStringProperty<UserModel>(_entities[2].properties[1]);

  /// See [UserModel.name].
  static final name =
      obx.QueryStringProperty<UserModel>(_entities[2].properties[2]);

  /// See [UserModel.email].
  static final email =
      obx.QueryStringProperty<UserModel>(_entities[2].properties[3]);

  /// See [UserModel.isCurrentUser].
  static final isCurrentUser =
      obx.QueryBooleanProperty<UserModel>(_entities[2].properties[4]);

  /// See [UserModel.lastUpdate].
  static final lastUpdate =
      obx.QueryDateProperty<UserModel>(_entities[2].properties[5]);

  /// See [UserModel.isSetupComplete].
  static final isSetupComplete =
      obx.QueryBooleanProperty<UserModel>(_entities[2].properties[6]);

  /// See [UserModel.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<UserModel>(_entities[2].properties[7]);

  /// See [UserModel.remoteId].
  static final remoteId =
      obx.QueryStringProperty<UserModel>(_entities[2].properties[8]);
}

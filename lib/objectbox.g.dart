// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/appointment/data/models/appointment.dart';
import 'features/appointment_templates/data/model/field.dart';
import 'features/appointment_templates/data/model/field_answer.dart';
import 'features/appointment_templates/data/model/template.dart';
import 'features/client/data/models/client.dart';
import 'features/user/data/models/users_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6),
      name: 'FieldModel',
      lastPropertyId: const obx_int.IdUid(10, 8830871549609841818),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4987253733664260378),
            name: 'localId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1128836391707515361),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3487889309704600814),
            name: 'lastUpdate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1223340284426202036),
            name: 'remoteId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8883484128750373114),
            name: 'formFieldType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6392087685802307996),
            name: 'appointmentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 3598701885457462899),
            relationTarget: 'AppointmentModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6963785314595703275),
            name: 'templateId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 2364838510077903882),
            relationTarget: 'AppointmentTemplateModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8830871549609841818),
            name: 'answerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 1538505947759255273),
            relationTarget: 'FieldAnswerModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2),
      name: 'AppointmentModel',
      lastPropertyId: const obx_int.IdUid(6, 4734559856003409283),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3331865463184248979),
            name: 'localId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8750155977320275511),
            name: 'remoteId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3823775708848738830),
            name: 'fromDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5587385553310279271),
            name: 'toDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 625059578056262747),
            name: 'lastUpdate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4734559856003409283),
            name: 'clientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 1946334522486954961),
            relationTarget: 'ClientModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'fields', srcEntity: 'FieldModel', srcField: 'appointment')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5),
      name: 'AppointmentTemplateModel',
      lastPropertyId: const obx_int.IdUid(5, 8263815142304931937),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1068970929063935680),
            name: 'localId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9107985784433699405),
            name: 'remoteId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4936006209922089957),
            name: 'lastUpdate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7833738969150588266),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 5379845610097248380)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8263815142304931937),
            name: 'duration',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'fields', srcEntity: 'FieldModel', srcField: 'template')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3),
      name: 'ClientModel',
      lastPropertyId: const obx_int.IdUid(9, 7234559328900190616),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3241978278620678974),
            name: 'localId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8906725109395119106),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2027845712497478218),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4421312535931179236),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7389054569073740939),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1833203443857996890),
            name: 'urlImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6174784703118179351),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4919568053282732977),
            name: 'remoteId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7234559328900190616),
            name: 'lastUpdate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'linkAppointments',
            srcEntity: 'AppointmentModel',
            srcField: 'client')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 1),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(9, 1224945161615313284),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2729234290222431168),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3533977671666599879),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4432724981459415031),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5410734881467320304),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5589336430471208110),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1937500422659137754),
            name: 'isCurrentUser',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4108223817629452004),
            name: 'isSetupComplete',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1224945161615313284),
            name: 'remoteId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 7),
      name: 'FieldAnswerModel',
      lastPropertyId: const obx_int.IdUid(11, 3513794434058134240),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2711061456828049753),
            name: 'localId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4080289837642348930),
            name: 'remoteId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2822521050917903223),
            name: 'lastUpdate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1283755720882257258),
            name: 'formFieldType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6041939630560057387),
            name: 'localDocs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2470905089050333725),
            name: 'remoteDocs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3309768463166875603),
            name: 'singleDoc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8157408356628389927),
            name: 'singleDocUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7011602480011915961),
            name: 'numberValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4940469889377361761),
            name: 'textValue',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3513794434058134240),
            name: 'dateValue',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 7),
      lastIndexId: const obx_int.IdUid(7, 1538505947759255273),
      lastRelationId: const obx_int.IdUid(2, 4933571554284600610),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [9130270367226397310, 2353577699014373951],
      retiredPropertyUids: const [
        1701739923913506732,
        7973595731220429514,
        504081564580996350
      ],
      retiredRelationUids: const [6766621169241648557, 4933571554284600610],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    FieldModel: obx_int.EntityDefinition<FieldModel>(
        model: _entities[0],
        toOneRelations: (FieldModel object) =>
            [object.appointment, object.template, object.answer],
        toManyRelations: (FieldModel object) => {},
        getId: (FieldModel object) => object.localId,
        setId: (FieldModel object, int id) {
          object.localId = id;
        },
        objectToFB: (FieldModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final remoteIdOffset = fbb.writeString(object.remoteId);
          fbb.startTable(11);
          fbb.addInt64(0, object.localId);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.lastUpdate.millisecondsSinceEpoch);
          fbb.addOffset(3, remoteIdOffset);
          fbb.addInt64(4, object.formFieldType);
          fbb.addInt64(5, object.appointment.targetId);
          fbb.addInt64(6, object.template.targetId);
          fbb.addInt64(9, object.answer.targetId);
          fbb.finish(fbb.endTable());
          return object.localId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final formFieldTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final localIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final remoteIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final lastUpdateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = FieldModel(titleParam, formFieldTypeParam,
              localId: localIdParam,
              remoteId: remoteIdParam,
              lastUpdate: lastUpdateParam);
          object.appointment.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.appointment.attach(store);
          object.template.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.template.attach(store);
          object.answer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.answer.attach(store);
          return object;
        }),
    AppointmentModel: obx_int.EntityDefinition<AppointmentModel>(
        model: _entities[1],
        toOneRelations: (AppointmentModel object) => [object.client],
        toManyRelations: (AppointmentModel object) => {
              obx_int.RelInfo<FieldModel>.toOneBacklink(6, object.localId,
                      (FieldModel srcObject) => srcObject.appointment):
                  object.fields
            },
        getId: (AppointmentModel object) => object.localId,
        setId: (AppointmentModel object, int id) {
          object.localId = id;
        },
        objectToFB: (AppointmentModel object, fb.Builder fbb) {
          final remoteIdOffset = fbb.writeString(object.remoteId);
          fbb.startTable(7);
          fbb.addInt64(0, object.localId);
          fbb.addOffset(1, remoteIdOffset);
          fbb.addInt64(2, object.fromDate.millisecondsSinceEpoch);
          fbb.addInt64(3, object.toDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.client.targetId);
          fbb.finish(fbb.endTable());
          return object.localId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final remoteIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final fromDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final toDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = AppointmentModel(
              remoteId: remoteIdParam,
              fromDate: fromDateParam,
              toDate: toDateParam,
              lastUpdate: lastUpdateParam)
            ..localId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.client.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.client.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<AppointmentModel>(
              object.fields,
              store,
              obx_int.RelInfo<FieldModel>.toOneBacklink(6, object.localId,
                  (FieldModel srcObject) => srcObject.appointment));
          return object;
        }),
    AppointmentTemplateModel:
        obx_int.EntityDefinition<AppointmentTemplateModel>(
            model: _entities[2],
            toOneRelations: (AppointmentTemplateModel object) => [],
            toManyRelations: (AppointmentTemplateModel object) => {
                  obx_int.RelInfo<FieldModel>.toOneBacklink(7, object.localId,
                          (FieldModel srcObject) => srcObject.template):
                      object.fields
                },
            getId: (AppointmentTemplateModel object) => object.localId,
            setId: (AppointmentTemplateModel object, int id) {
              object.localId = id;
            },
            objectToFB: (AppointmentTemplateModel object, fb.Builder fbb) {
              final remoteIdOffset = fbb.writeString(object.remoteId);
              final nameOffset = fbb.writeString(object.name);
              fbb.startTable(6);
              fbb.addInt64(0, object.localId);
              fbb.addOffset(1, remoteIdOffset);
              fbb.addInt64(2, object.lastUpdate.millisecondsSinceEpoch);
              fbb.addOffset(3, nameOffset);
              fbb.addInt64(4, object.duration);
              fbb.finish(fbb.endTable());
              return object.localId;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final remoteIdParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 6, '');
              final lastUpdateParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
              final nameParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
              final localIdParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final durationParam = const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12);
              final object = AppointmentTemplateModel(
                  remoteIdParam, lastUpdateParam,
                  name: nameParam,
                  localId: localIdParam,
                  duration: durationParam);
              obx_int.InternalToManyAccess.setRelInfo<AppointmentTemplateModel>(
                  object.fields,
                  store,
                  obx_int.RelInfo<FieldModel>.toOneBacklink(7, object.localId,
                      (FieldModel srcObject) => srcObject.template));
              return object;
            }),
    ClientModel: obx_int.EntityDefinition<ClientModel>(
        model: _entities[3],
        toOneRelations: (ClientModel object) => [],
        toManyRelations: (ClientModel object) => {
              obx_int.RelInfo<AppointmentModel>.toOneBacklink(6, object.localId,
                      (AppointmentModel srcObject) => srcObject.client):
                  object.linkAppointments
            },
        getId: (ClientModel object) => object.localId,
        setId: (ClientModel object, int id) {
          object.localId = id;
        },
        objectToFB: (ClientModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset = fbb.writeString(object.phone);
          final imagePathOffset = fbb.writeString(object.imagePath);
          final urlImageOffset = fbb.writeString(object.urlImage);
          final descriptionOffset = fbb.writeString(object.description);
          final remoteIdOffset = fbb.writeString(object.remoteId);
          fbb.startTable(10);
          fbb.addInt64(0, object.localId);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, imagePathOffset);
          fbb.addOffset(5, urlImageOffset);
          fbb.addOffset(6, descriptionOffset);
          fbb.addOffset(7, remoteIdOffset);
          fbb.addInt64(8, object.lastUpdate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.localId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final urlImageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastUpdateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final remoteIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = ClientModel(
              description: descriptionParam,
              name: nameParam,
              urlImage: urlImageParam,
              email: emailParam,
              lastUpdate: lastUpdateParam,
              phone: phoneParam,
              imagePath: imagePathParam,
              remoteId: remoteIdParam)
            ..localId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<ClientModel>(
              object.linkAppointments,
              store,
              obx_int.RelInfo<AppointmentModel>.toOneBacklink(6, object.localId,
                  (AppointmentModel srcObject) => srcObject.client));
          return object;
        }),
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[4],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final imagePathOffset = fbb.writeString(object.imagePath);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final remoteIdOffset = fbb.writeString(object.remoteId);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imagePathOffset);
          fbb.addOffset(2, imageUrlOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addBool(5, object.isCurrentUser);
          fbb.addBool(7, object.isSetupComplete);
          fbb.addOffset(8, remoteIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isCurrentUserParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final isSetupCompleteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final remoteIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final object = UserModel(
              id: idParam,
              name: nameParam,
              email: emailParam,
              imagePath: imagePathParam,
              isCurrentUser: isCurrentUserParam,
              isSetupComplete: isSetupCompleteParam,
              imageUrl: imageUrlParam,
              remoteId: remoteIdParam);

          return object;
        }),
    FieldAnswerModel: obx_int.EntityDefinition<FieldAnswerModel>(
        model: _entities[5],
        toOneRelations: (FieldAnswerModel object) => [],
        toManyRelations: (FieldAnswerModel object) => {},
        getId: (FieldAnswerModel object) => object.localId,
        setId: (FieldAnswerModel object, int id) {
          object.localId = id;
        },
        objectToFB: (FieldAnswerModel object, fb.Builder fbb) {
          final remoteIdOffset = fbb.writeString(object.remoteId);
          final localDocsOffset = fbb.writeList(
              object.localDocs.map(fbb.writeString).toList(growable: false));
          final remoteDocsOffset = fbb.writeList(
              object.remoteDocs.map(fbb.writeString).toList(growable: false));
          final singleDocOffset = fbb.writeString(object.singleDoc);
          final singleDocUrlOffset = fbb.writeString(object.singleDocUrl);
          final textValueOffset = fbb.writeString(object.textValue);
          fbb.startTable(12);
          fbb.addInt64(0, object.localId);
          fbb.addOffset(1, remoteIdOffset);
          fbb.addInt64(2, object.lastUpdate.millisecondsSinceEpoch);
          fbb.addInt64(3, object.formFieldType);
          fbb.addOffset(4, localDocsOffset);
          fbb.addOffset(5, remoteDocsOffset);
          fbb.addOffset(6, singleDocOffset);
          fbb.addOffset(7, singleDocUrlOffset);
          fbb.addInt64(8, object.numberValue);
          fbb.addOffset(9, textValueOffset);
          fbb.addInt64(10, object.dateValue.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.localId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final localIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final remoteIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final formFieldTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final localDocsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final remoteDocsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final singleDocParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final singleDocUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final numberValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final textValueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final dateValueParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final lastUpdateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = FieldAnswerModel(
              localId: localIdParam,
              remoteId: remoteIdParam,
              formFieldType: formFieldTypeParam,
              localDocs: localDocsParam,
              remoteDocs: remoteDocsParam,
              singleDoc: singleDocParam,
              singleDocUrl: singleDocUrlParam,
              numberValue: numberValueParam,
              textValue: textValueParam,
              dateValue: dateValueParam,
              lastUpdate: lastUpdateParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [FieldModel] entity fields to define ObjectBox queries.
class FieldModel_ {
  /// See [FieldModel.localId].
  static final localId =
      obx.QueryIntegerProperty<FieldModel>(_entities[0].properties[0]);

  /// See [FieldModel.title].
  static final title =
      obx.QueryStringProperty<FieldModel>(_entities[0].properties[1]);

  /// See [FieldModel.lastUpdate].
  static final lastUpdate =
      obx.QueryDateProperty<FieldModel>(_entities[0].properties[2]);

  /// See [FieldModel.remoteId].
  static final remoteId =
      obx.QueryStringProperty<FieldModel>(_entities[0].properties[3]);

  /// See [FieldModel.formFieldType].
  static final formFieldType =
      obx.QueryIntegerProperty<FieldModel>(_entities[0].properties[4]);

  /// See [FieldModel.appointment].
  static final appointment =
      obx.QueryRelationToOne<FieldModel, AppointmentModel>(
          _entities[0].properties[5]);

  /// See [FieldModel.template].
  static final template =
      obx.QueryRelationToOne<FieldModel, AppointmentTemplateModel>(
          _entities[0].properties[6]);

  /// See [FieldModel.answer].
  static final answer = obx.QueryRelationToOne<FieldModel, FieldAnswerModel>(
      _entities[0].properties[7]);
}

/// [AppointmentModel] entity fields to define ObjectBox queries.
class AppointmentModel_ {
  /// See [AppointmentModel.localId].
  static final localId =
      obx.QueryIntegerProperty<AppointmentModel>(_entities[1].properties[0]);

  /// See [AppointmentModel.remoteId].
  static final remoteId =
      obx.QueryStringProperty<AppointmentModel>(_entities[1].properties[1]);

  /// See [AppointmentModel.fromDate].
  static final fromDate =
      obx.QueryDateProperty<AppointmentModel>(_entities[1].properties[2]);

  /// See [AppointmentModel.toDate].
  static final toDate =
      obx.QueryDateProperty<AppointmentModel>(_entities[1].properties[3]);

  /// See [AppointmentModel.lastUpdate].
  static final lastUpdate =
      obx.QueryDateProperty<AppointmentModel>(_entities[1].properties[4]);

  /// See [AppointmentModel.client].
  static final client = obx.QueryRelationToOne<AppointmentModel, ClientModel>(
      _entities[1].properties[5]);

  /// see [AppointmentModel.fields]
  static final fields = obx.QueryBacklinkToMany<FieldModel, AppointmentModel>(
      FieldModel_.appointment);
}

/// [AppointmentTemplateModel] entity fields to define ObjectBox queries.
class AppointmentTemplateModel_ {
  /// See [AppointmentTemplateModel.localId].
  static final localId = obx.QueryIntegerProperty<AppointmentTemplateModel>(
      _entities[2].properties[0]);

  /// See [AppointmentTemplateModel.remoteId].
  static final remoteId = obx.QueryStringProperty<AppointmentTemplateModel>(
      _entities[2].properties[1]);

  /// See [AppointmentTemplateModel.lastUpdate].
  static final lastUpdate = obx.QueryDateProperty<AppointmentTemplateModel>(
      _entities[2].properties[2]);

  /// See [AppointmentTemplateModel.name].
  static final name = obx.QueryStringProperty<AppointmentTemplateModel>(
      _entities[2].properties[3]);

  /// See [AppointmentTemplateModel.duration].
  static final duration = obx.QueryIntegerProperty<AppointmentTemplateModel>(
      _entities[2].properties[4]);

  /// see [AppointmentTemplateModel.fields]
  static final fields =
      obx.QueryBacklinkToMany<FieldModel, AppointmentTemplateModel>(
          FieldModel_.template);
}

/// [ClientModel] entity fields to define ObjectBox queries.
class ClientModel_ {
  /// See [ClientModel.localId].
  static final localId =
      obx.QueryIntegerProperty<ClientModel>(_entities[3].properties[0]);

  /// See [ClientModel.name].
  static final name =
      obx.QueryStringProperty<ClientModel>(_entities[3].properties[1]);

  /// See [ClientModel.email].
  static final email =
      obx.QueryStringProperty<ClientModel>(_entities[3].properties[2]);

  /// See [ClientModel.phone].
  static final phone =
      obx.QueryStringProperty<ClientModel>(_entities[3].properties[3]);

  /// See [ClientModel.imagePath].
  static final imagePath =
      obx.QueryStringProperty<ClientModel>(_entities[3].properties[4]);

  /// See [ClientModel.urlImage].
  static final urlImage =
      obx.QueryStringProperty<ClientModel>(_entities[3].properties[5]);

  /// See [ClientModel.description].
  static final description =
      obx.QueryStringProperty<ClientModel>(_entities[3].properties[6]);

  /// See [ClientModel.remoteId].
  static final remoteId =
      obx.QueryStringProperty<ClientModel>(_entities[3].properties[7]);

  /// See [ClientModel.lastUpdate].
  static final lastUpdate =
      obx.QueryDateProperty<ClientModel>(_entities[3].properties[8]);

  /// see [ClientModel.linkAppointments]
  static final linkAppointments =
      obx.QueryBacklinkToMany<AppointmentModel, ClientModel>(
          AppointmentModel_.client);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.id].
  static final id =
      obx.QueryIntegerProperty<UserModel>(_entities[4].properties[0]);

  /// See [UserModel.imagePath].
  static final imagePath =
      obx.QueryStringProperty<UserModel>(_entities[4].properties[1]);

  /// See [UserModel.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<UserModel>(_entities[4].properties[2]);

  /// See [UserModel.name].
  static final name =
      obx.QueryStringProperty<UserModel>(_entities[4].properties[3]);

  /// See [UserModel.email].
  static final email =
      obx.QueryStringProperty<UserModel>(_entities[4].properties[4]);

  /// See [UserModel.isCurrentUser].
  static final isCurrentUser =
      obx.QueryBooleanProperty<UserModel>(_entities[4].properties[5]);

  /// See [UserModel.isSetupComplete].
  static final isSetupComplete =
      obx.QueryBooleanProperty<UserModel>(_entities[4].properties[6]);

  /// See [UserModel.remoteId].
  static final remoteId =
      obx.QueryStringProperty<UserModel>(_entities[4].properties[7]);
}

/// [FieldAnswerModel] entity fields to define ObjectBox queries.
class FieldAnswerModel_ {
  /// See [FieldAnswerModel.localId].
  static final localId =
      obx.QueryIntegerProperty<FieldAnswerModel>(_entities[5].properties[0]);

  /// See [FieldAnswerModel.remoteId].
  static final remoteId =
      obx.QueryStringProperty<FieldAnswerModel>(_entities[5].properties[1]);

  /// See [FieldAnswerModel.lastUpdate].
  static final lastUpdate =
      obx.QueryDateProperty<FieldAnswerModel>(_entities[5].properties[2]);

  /// See [FieldAnswerModel.formFieldType].
  static final formFieldType =
      obx.QueryIntegerProperty<FieldAnswerModel>(_entities[5].properties[3]);

  /// See [FieldAnswerModel.localDocs].
  static final localDocs = obx.QueryStringVectorProperty<FieldAnswerModel>(
      _entities[5].properties[4]);

  /// See [FieldAnswerModel.remoteDocs].
  static final remoteDocs = obx.QueryStringVectorProperty<FieldAnswerModel>(
      _entities[5].properties[5]);

  /// See [FieldAnswerModel.singleDoc].
  static final singleDoc =
      obx.QueryStringProperty<FieldAnswerModel>(_entities[5].properties[6]);

  /// See [FieldAnswerModel.singleDocUrl].
  static final singleDocUrl =
      obx.QueryStringProperty<FieldAnswerModel>(_entities[5].properties[7]);

  /// See [FieldAnswerModel.numberValue].
  static final numberValue =
      obx.QueryIntegerProperty<FieldAnswerModel>(_entities[5].properties[8]);

  /// See [FieldAnswerModel.textValue].
  static final textValue =
      obx.QueryStringProperty<FieldAnswerModel>(_entities[5].properties[9]);

  /// See [FieldAnswerModel.dateValue].
  static final dateValue =
      obx.QueryDateProperty<FieldAnswerModel>(_entities[5].properties[10]);
}
